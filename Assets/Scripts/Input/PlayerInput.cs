//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e0a2a58f-0a8b-40c0-ba7d-40b914c3faf1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7768ab75-001b-443c-97f2-186bad35c183"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f231c0c9-4e7f-457d-a270-bf4dcd6f42ce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""386b2e41-af36-4d2b-82fa-3ec83eaee3d7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""1c3cf187-10aa-4457-a0a8-08c97e317ef2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""1bbc6098-8410-4d34-9b96-ff92e1231554"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""ca7dd880-6911-42d1-843d-93e3bd29d668"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""67307a43-476c-4517-974f-8e4d3f58eca7"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7bbae8ec-2a36-4605-a56c-354aed7b3848"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""200c1189-1290-4682-847d-5e42d7712a7f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 1"",
                    ""type"": ""Button"",
                    ""id"": ""7d9220b8-8372-4793-a38f-2fe109ff7440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 2"",
                    ""type"": ""Button"",
                    ""id"": ""823ae6d4-dc7a-4ae4-8cee-695255c51b77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 3"",
                    ""type"": ""Button"",
                    ""id"": ""a2fc3fec-0c8e-465c-b096-dca7c8c9760d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 4"",
                    ""type"": ""Button"",
                    ""id"": ""afe1694d-91c6-4c18-84ae-917b34f1aae2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 5"",
                    ""type"": ""Button"",
                    ""id"": ""61525246-3ab4-4a2f-8c7a-b70b403ad192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Active Item 6"",
                    ""type"": ""Button"",
                    ""id"": ""da1533c4-eaa8-4137-9ef5-17198d93c11a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d4da7e95-c249-419b-a9cf-03c963a4a2f7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dc724cb-e812-4116-b279-90c7df3cdc54"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbd4636e-92e4-4012-b151-7ee7a12021e4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd83a51a-312b-4d4b-9834-b3b48ffdd0ad"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d703b54-da55-4010-bbed-8f3c46e84415"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d5855ab-741f-4d1e-b47d-b0037bbf99c7"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9713b666-d070-404e-970d-930a04a95d37"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16712fc4-1a30-4bc2-a7e5-7e69eb7378df"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Active Item 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""6a4d258a-4638-493d-91fa-a03c955da12e"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""4ac70482-f95f-4461-a46f-c692e98f04ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""9dcd2abe-7655-404f-8910-0a58a9fee24c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shop"",
                    ""type"": ""Button"",
                    ""id"": ""5aa1a525-cbc8-487b-9f94-28cf474bd41f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09535aef-16e9-4602-ab66-1d4a6509820e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51fb9293-fa4b-4b74-86ff-ce32fdfe7334"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""925ad089-367a-4deb-939f-3837aa567e44"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""0b18f1b1-d91d-4632-90d1-61ebc86daaed"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""9ff0960d-06ef-42e7-a76f-b61cd0d965aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""c3008082-eb76-40c9-8164-fdfd245ba2d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fullscreen"",
                    ""type"": ""Button"",
                    ""id"": ""384753db-1c57-4838-bf5e-3daa697bafa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Details"",
                    ""type"": ""Button"",
                    ""id"": ""dd86172b-5e14-4cbf-9eda-74e809367538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Debug Console"",
                    ""type"": ""Button"",
                    ""id"": ""a95205fd-a823-475b-b525-208d02e92f67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57c9c72b-de10-445b-a93a-ce76de50620c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dca3f039-966d-4630-a0bd-a64a9808cb9c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fullscreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""642c416b-04d2-46e3-9f86-58b40d9f73d4"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Details"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cdb5dc0-3466-46d6-b84d-33d4b2cae831"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Debug Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a730cc16-fd80-41dc-8587-492e76c1e08b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Attack = m_Combat.FindAction("Attack", throwIfNotFound: true);
        m_Combat_Special = m_Combat.FindAction("Special", throwIfNotFound: true);
        m_Combat_ActiveItem1 = m_Combat.FindAction("Active Item 1", throwIfNotFound: true);
        m_Combat_ActiveItem2 = m_Combat.FindAction("Active Item 2", throwIfNotFound: true);
        m_Combat_ActiveItem3 = m_Combat.FindAction("Active Item 3", throwIfNotFound: true);
        m_Combat_ActiveItem4 = m_Combat.FindAction("Active Item 4", throwIfNotFound: true);
        m_Combat_ActiveItem5 = m_Combat.FindAction("Active Item 5", throwIfNotFound: true);
        m_Combat_ActiveItem6 = m_Combat.FindAction("Active Item 6", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Interact = m_Camera.FindAction("Interact", throwIfNotFound: true);
        m_Camera_MousePosition = m_Camera.FindAction("MousePosition", throwIfNotFound: true);
        m_Camera_Shop = m_Camera.FindAction("Shop", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Close = m_UI.FindAction("Close", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Fullscreen = m_UI.FindAction("Fullscreen", throwIfNotFound: true);
        m_UI_Details = m_UI.FindAction("Details", throwIfNotFound: true);
        m_UI_DebugConsole = m_UI.FindAction("Debug Console", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Movement;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Attack;
    private readonly InputAction m_Combat_Special;
    private readonly InputAction m_Combat_ActiveItem1;
    private readonly InputAction m_Combat_ActiveItem2;
    private readonly InputAction m_Combat_ActiveItem3;
    private readonly InputAction m_Combat_ActiveItem4;
    private readonly InputAction m_Combat_ActiveItem5;
    private readonly InputAction m_Combat_ActiveItem6;
    public struct CombatActions
    {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Combat_Attack;
        public InputAction @Special => m_Wrapper.m_Combat_Special;
        public InputAction @ActiveItem1 => m_Wrapper.m_Combat_ActiveItem1;
        public InputAction @ActiveItem2 => m_Wrapper.m_Combat_ActiveItem2;
        public InputAction @ActiveItem3 => m_Wrapper.m_Combat_ActiveItem3;
        public InputAction @ActiveItem4 => m_Wrapper.m_Combat_ActiveItem4;
        public InputAction @ActiveItem5 => m_Wrapper.m_Combat_ActiveItem5;
        public InputAction @ActiveItem6 => m_Wrapper.m_Combat_ActiveItem6;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Special.started += instance.OnSpecial;
            @Special.performed += instance.OnSpecial;
            @Special.canceled += instance.OnSpecial;
            @ActiveItem1.started += instance.OnActiveItem1;
            @ActiveItem1.performed += instance.OnActiveItem1;
            @ActiveItem1.canceled += instance.OnActiveItem1;
            @ActiveItem2.started += instance.OnActiveItem2;
            @ActiveItem2.performed += instance.OnActiveItem2;
            @ActiveItem2.canceled += instance.OnActiveItem2;
            @ActiveItem3.started += instance.OnActiveItem3;
            @ActiveItem3.performed += instance.OnActiveItem3;
            @ActiveItem3.canceled += instance.OnActiveItem3;
            @ActiveItem4.started += instance.OnActiveItem4;
            @ActiveItem4.performed += instance.OnActiveItem4;
            @ActiveItem4.canceled += instance.OnActiveItem4;
            @ActiveItem5.started += instance.OnActiveItem5;
            @ActiveItem5.performed += instance.OnActiveItem5;
            @ActiveItem5.canceled += instance.OnActiveItem5;
            @ActiveItem6.started += instance.OnActiveItem6;
            @ActiveItem6.performed += instance.OnActiveItem6;
            @ActiveItem6.canceled += instance.OnActiveItem6;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Special.started -= instance.OnSpecial;
            @Special.performed -= instance.OnSpecial;
            @Special.canceled -= instance.OnSpecial;
            @ActiveItem1.started -= instance.OnActiveItem1;
            @ActiveItem1.performed -= instance.OnActiveItem1;
            @ActiveItem1.canceled -= instance.OnActiveItem1;
            @ActiveItem2.started -= instance.OnActiveItem2;
            @ActiveItem2.performed -= instance.OnActiveItem2;
            @ActiveItem2.canceled -= instance.OnActiveItem2;
            @ActiveItem3.started -= instance.OnActiveItem3;
            @ActiveItem3.performed -= instance.OnActiveItem3;
            @ActiveItem3.canceled -= instance.OnActiveItem3;
            @ActiveItem4.started -= instance.OnActiveItem4;
            @ActiveItem4.performed -= instance.OnActiveItem4;
            @ActiveItem4.canceled -= instance.OnActiveItem4;
            @ActiveItem5.started -= instance.OnActiveItem5;
            @ActiveItem5.performed -= instance.OnActiveItem5;
            @ActiveItem5.canceled -= instance.OnActiveItem5;
            @ActiveItem6.started -= instance.OnActiveItem6;
            @ActiveItem6.performed -= instance.OnActiveItem6;
            @ActiveItem6.canceled -= instance.OnActiveItem6;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Interact;
    private readonly InputAction m_Camera_MousePosition;
    private readonly InputAction m_Camera_Shop;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Camera_Interact;
        public InputAction @MousePosition => m_Wrapper.m_Camera_MousePosition;
        public InputAction @Shop => m_Wrapper.m_Camera_Shop;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Shop.started += instance.OnShop;
            @Shop.performed += instance.OnShop;
            @Shop.canceled += instance.OnShop;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Shop.started -= instance.OnShop;
            @Shop.performed -= instance.OnShop;
            @Shop.canceled -= instance.OnShop;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Close;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Fullscreen;
    private readonly InputAction m_UI_Details;
    private readonly InputAction m_UI_DebugConsole;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_UI_Close;
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputAction @Fullscreen => m_Wrapper.m_UI_Fullscreen;
        public InputAction @Details => m_Wrapper.m_UI_Details;
        public InputAction @DebugConsole => m_Wrapper.m_UI_DebugConsole;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Fullscreen.started += instance.OnFullscreen;
            @Fullscreen.performed += instance.OnFullscreen;
            @Fullscreen.canceled += instance.OnFullscreen;
            @Details.started += instance.OnDetails;
            @Details.performed += instance.OnDetails;
            @Details.canceled += instance.OnDetails;
            @DebugConsole.started += instance.OnDebugConsole;
            @DebugConsole.performed += instance.OnDebugConsole;
            @DebugConsole.canceled += instance.OnDebugConsole;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Fullscreen.started -= instance.OnFullscreen;
            @Fullscreen.performed -= instance.OnFullscreen;
            @Fullscreen.canceled -= instance.OnFullscreen;
            @Details.started -= instance.OnDetails;
            @Details.performed -= instance.OnDetails;
            @Details.canceled -= instance.OnDetails;
            @DebugConsole.started -= instance.OnDebugConsole;
            @DebugConsole.performed -= instance.OnDebugConsole;
            @DebugConsole.canceled -= instance.OnDebugConsole;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnSpecial(InputAction.CallbackContext context);
        void OnActiveItem1(InputAction.CallbackContext context);
        void OnActiveItem2(InputAction.CallbackContext context);
        void OnActiveItem3(InputAction.CallbackContext context);
        void OnActiveItem4(InputAction.CallbackContext context);
        void OnActiveItem5(InputAction.CallbackContext context);
        void OnActiveItem6(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnShop(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClose(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnFullscreen(InputAction.CallbackContext context);
        void OnDetails(InputAction.CallbackContext context);
        void OnDebugConsole(InputAction.CallbackContext context);
    }
}
